package com.speedment.demo.sakila.sakila.datetime.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.demo.sakila.sakila.datetime.Datetime;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ShortField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Optional;

/**
 * The generated base for the {@link
 * com.speedment.demo.sakila.sakila.datetime.Datetime}-interface representing
 * entities of the {@code datetime}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedDatetime {
    
    /**
     * This Field corresponds to the {@link Datetime} field that can be obtained
     * using the {@link Datetime#getId()} method.
     */
    ShortField<Datetime, Short> ID = ShortField.create(
        Identifier.ID,
        Datetime::getId,
        Datetime::setId,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Datetime} field that can be obtained
     * using the {@link Datetime#getTime()} method.
     */
    ComparableField<Datetime, Time, Time> TIME = ComparableField.create(
        Identifier.TIME,
        o -> OptionalUtil.unwrap(o.getTime()),
        Datetime::setTime,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Datetime} field that can be obtained
     * using the {@link Datetime#getTimestamp()} method.
     */
    ComparableField<Datetime, Timestamp, Timestamp> TIMESTAMP = ComparableField.create(
        Identifier.TIMESTAMP,
        o -> OptionalUtil.unwrap(o.getTimestamp()),
        Datetime::setTimestamp,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Datetime} field that can be obtained
     * using the {@link Datetime#getDate()} method.
     */
    ComparableField<Datetime, Date, Date> DATE = ComparableField.create(
        Identifier.DATE,
        o -> OptionalUtil.unwrap(o.getDate()),
        Datetime::setDate,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Datetime} field that can be obtained
     * using the {@link Datetime#getDatetime()} method.
     */
    ComparableField<Datetime, Timestamp, Timestamp> DATETIME = ComparableField.create(
        Identifier.DATETIME,
        o -> OptionalUtil.unwrap(o.getDatetime()),
        Datetime::setDatetime,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Datetime. The id field corresponds to the database
     * column sakila.sakila.datetime.id.
     * 
     * @return the id of this Datetime
     */
    short getId();
    
    /**
     * Returns the time of this Datetime. The time field corresponds to the
     * database column sakila.sakila.datetime.time.
     * 
     * @return the time of this Datetime
     */
    Optional<Time> getTime();
    
    /**
     * Returns the timestamp of this Datetime. The timestamp field corresponds
     * to the database column sakila.sakila.datetime.timestamp.
     * 
     * @return the timestamp of this Datetime
     */
    Optional<Timestamp> getTimestamp();
    
    /**
     * Returns the date of this Datetime. The date field corresponds to the
     * database column sakila.sakila.datetime.date.
     * 
     * @return the date of this Datetime
     */
    Optional<Date> getDate();
    
    /**
     * Returns the datetime of this Datetime. The datetime field corresponds to
     * the database column sakila.sakila.datetime.datetime.
     * 
     * @return the datetime of this Datetime
     */
    Optional<Timestamp> getDatetime();
    
    /**
     * Sets the id of this Datetime. The id field corresponds to the database
     * column sakila.sakila.datetime.id.
     * 
     * @param id to set of this Datetime
     * @return   this Datetime instance
     */
    Datetime setId(short id);
    
    /**
     * Sets the time of this Datetime. The time field corresponds to the
     * database column sakila.sakila.datetime.time.
     * 
     * @param time to set of this Datetime
     * @return     this Datetime instance
     */
    Datetime setTime(Time time);
    
    /**
     * Sets the timestamp of this Datetime. The timestamp field corresponds to
     * the database column sakila.sakila.datetime.timestamp.
     * 
     * @param timestamp to set of this Datetime
     * @return          this Datetime instance
     */
    Datetime setTimestamp(Timestamp timestamp);
    
    /**
     * Sets the date of this Datetime. The date field corresponds to the
     * database column sakila.sakila.datetime.date.
     * 
     * @param date to set of this Datetime
     * @return     this Datetime instance
     */
    Datetime setDate(Date date);
    
    /**
     * Sets the datetime of this Datetime. The datetime field corresponds to the
     * database column sakila.sakila.datetime.datetime.
     * 
     * @param datetime to set of this Datetime
     * @return         this Datetime instance
     */
    Datetime setDatetime(Timestamp datetime);
    
    enum Identifier implements ColumnIdentifier<Datetime> {
        
        ID        ("id"),
        TIME      ("time"),
        TIMESTAMP ("timestamp"),
        DATE      ("date"),
        DATETIME  ("datetime");
        
        private final String columnId;
        private final TableIdentifier<Datetime> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "sakila";
        }
        
        @Override
        public String getSchemaId() {
            return "sakila";
        }
        
        @Override
        public String getTableId() {
            return "datetime";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Datetime> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}