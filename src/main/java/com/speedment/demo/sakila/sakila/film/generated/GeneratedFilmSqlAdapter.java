package com.speedment.demo.sakila.sakila.film.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.demo.sakila.sakila.film.Film;
import com.speedment.demo.sakila.sakila.film.FilmImpl;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.speedment.demo.sakila.sakila.film.Film} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedFilmSqlAdapter implements SqlAdapter<Film> {
    
    private final TableIdentifier<Film> tableIdentifier;
    
    protected GeneratedFilmSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("sakila", "sakila", "film");
    }
    
    protected Film apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setFilmId(             getInt(resultSet, 1 + offset))
            .setTitle(              resultSet.getString(2 + offset))
            .setDescription(        resultSet.getString(3 + offset))
            .setReleaseYear(        getInt(resultSet, 4 + offset))
            .setLanguageId(         getInt(resultSet, 5 + offset))
            .setOriginalLanguageId( getInt(resultSet, 6 + offset))
            .setRentalDuration(     getInt(resultSet, 7 + offset))
            .setRentalRate(         resultSet.getBigDecimal(8 + offset))
            .setLength(             getInt(resultSet, 9 + offset))
            .setReplacementCost(    resultSet.getBigDecimal(10 + offset))
            .setRating(             resultSet.getString(11 + offset))
            .setSpecialFeatures(    resultSet.getString(12 + offset))
            .setLastUpdate(         resultSet.getTimestamp(13 + offset))
            ;
    }
    
    protected FilmImpl createEntity() {
        return new FilmImpl();
    }
    
    @Override
    public TableIdentifier<Film> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Film> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Film> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}