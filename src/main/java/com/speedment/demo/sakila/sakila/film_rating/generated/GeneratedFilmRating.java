package com.speedment.demo.sakila.sakila.film_rating.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.demo.sakila.sakila.film.Film;
import com.speedment.demo.sakila.sakila.film_rating.FilmRating;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.speedment.demo.sakila.sakila.film_rating.FilmRating}-interface
 * representing entities of the {@code film_rating}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedFilmRating {
    
    /**
     * This Field corresponds to the {@link FilmRating} field that can be
     * obtained using the {@link FilmRating#getFilmRatingId()} method.
     */
    IntField<FilmRating, Integer> FILM_RATING_ID = IntField.create(
        Identifier.FILM_RATING_ID,
        FilmRating::getFilmRatingId,
        FilmRating::setFilmRatingId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link FilmRating} field that can be
     * obtained using the {@link FilmRating#getFilmId()} method.
     */
    IntForeignKeyField<FilmRating, Integer, Film> FILM_ID = IntForeignKeyField.create(
        Identifier.FILM_ID,
        FilmRating::getFilmId,
        FilmRating::setFilmId,
        Film.FILM_ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link FilmRating} field that can be
     * obtained using the {@link FilmRating#getStars()} method.
     */
    IntField<FilmRating, Integer> STARS = IntField.create(
        Identifier.STARS,
        FilmRating::getStars,
        FilmRating::setStars,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the filmRatingId of this FilmRating. The filmRatingId field
     * corresponds to the database column
     * sakila.sakila.film_rating.film_rating_id.
     * 
     * @return the filmRatingId of this FilmRating
     */
    int getFilmRatingId();
    
    /**
     * Returns the filmId of this FilmRating. The filmId field corresponds to
     * the database column sakila.sakila.film_rating.film_id.
     * 
     * @return the filmId of this FilmRating
     */
    int getFilmId();
    
    /**
     * Returns the stars of this FilmRating. The stars field corresponds to the
     * database column sakila.sakila.film_rating.stars.
     * 
     * @return the stars of this FilmRating
     */
    int getStars();
    
    /**
     * Sets the filmRatingId of this FilmRating. The filmRatingId field
     * corresponds to the database column
     * sakila.sakila.film_rating.film_rating_id.
     * 
     * @param filmRatingId to set of this FilmRating
     * @return             this FilmRating instance
     */
    FilmRating setFilmRatingId(int filmRatingId);
    
    /**
     * Sets the filmId of this FilmRating. The filmId field corresponds to the
     * database column sakila.sakila.film_rating.film_id.
     * 
     * @param filmId to set of this FilmRating
     * @return       this FilmRating instance
     */
    FilmRating setFilmId(int filmId);
    
    /**
     * Sets the stars of this FilmRating. The stars field corresponds to the
     * database column sakila.sakila.film_rating.stars.
     * 
     * @param stars to set of this FilmRating
     * @return      this FilmRating instance
     */
    FilmRating setStars(int stars);
    
    /**
     * Queries the specified manager for the referenced Film. If no such Film
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Film findFilmId(Manager<Film> foreignManager);
    
    enum Identifier implements ColumnIdentifier<FilmRating> {
        
        FILM_RATING_ID ("film_rating_id"),
        FILM_ID        ("film_id"),
        STARS          ("stars");
        
        private final String columnId;
        private final TableIdentifier<FilmRating> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "sakila";
        }
        
        @Override
        public String getSchemaId() {
            return "sakila";
        }
        
        @Override
        public String getTableId() {
            return "film_rating";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<FilmRating> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}