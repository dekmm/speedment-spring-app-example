package com.speedment.demo.sakila.sakila.actor.generated;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.demo.sakila.sakila.actor.Actor;
import com.speedment.demo.sakila.sakila.actor.ActorManager;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.core.manager.FieldSet;
import com.speedment.runtime.core.manager.Persister;
import com.speedment.runtime.core.manager.Updater;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Actor entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedActorController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired ActorManager manager;
    protected JsonEncoder<Actor> encoder;
    
    @PostConstruct
    void createActorEncoder() {
        encoder = jsonComponent.<Actor>emptyEncoder()
            .put("actorId", Actor.ACTOR_ID)
            .put("firstName", Actor.FIRST_NAME)
            .put("lastName", Actor.LAST_NAME)
            .build();
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/actors", produces = "application/json")
    @ApiOperation(value = "Retrieve a list of Actor entities", httpMethod = "GET")
    @ApiResponse(code = 200, message = "Returns a 200 response code if a list of Actor entities has been retrieved successfully", response = String.class)
    public String list(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return listHelper(
            ControllerUtil.parseFilters(filters, ActorFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, ActorSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected String listHelper(
            List<Predicate<Actor>> predicates,
            List<Comparator<Actor>> sorters,
            long start,
            long limit) {
        Stream<Actor> stream = manager.stream();
        
        for (final Predicate<Actor> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Actor>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/actors/{actor_id}", produces = "application/json")
    @ApiOperation(value = "Retrieve a Actor entity with a specified 'actor_id' column value", httpMethod = "GET")
    @ApiResponse(code = 200, message = "Returns a 200 response code if a Actor entity has been updated successfully")
    public String get(
            @PathVariable(name = "actor_id") int actorId) {
        return encoder.apply(
            manager.stream()
                .filter(Actor.ACTOR_ID.equal(actorId))
                .findFirst()
                .orElseThrow(() -> new ActorNotFoundException(actorId))
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/actors", consumes = "application/json")
    @ApiOperation(value = "Create a Actor entity", httpMethod = "POST")
    @ApiResponse(code = 201, message = "Returns a 201 response code if a Actor entity has been created successfully")
    public void create(
            @RequestBody @Validated ActorCreateBody createBody) {
        final FieldSet<Actor> excluded = FieldSet.allExcept(
            Actor.ACTOR_ID
        );
        
        final Persister<Actor> persister = manager.persister(excluded);
        final Actor actor = manager.create()
            .setFirstName(createBody.getFirstName())
            .setLastName(createBody.getLastName())
        ;
        
        persister.accept(actor);
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/actors/{actor_id}", consumes = "application/json")
    @ApiOperation(value = "Update a Actor entity with a specified 'actor_id' column value", httpMethod = "PATCH")
    @ApiResponse(code = 201, message = "Returns a 201 response code if a Actor entity has been updated successfully")
    public void update(
            @PathVariable(name = "actor_id") int actorId,
            @RequestBody @Validated ActorUpdateBody updateBody) {
        final FieldSet<Actor> excluded = FieldSet.allExcept(
            Actor.ACTOR_ID
        );
        
        final Updater<Actor> updater = manager.updater(excluded);
        final Actor actor = manager.stream()
            .filter(Actor.ACTOR_ID.equal(actorId))
            .findFirst()
            .orElseThrow(() -> new ActorNotFoundException(actorId));
        
        actor.setFirstName(updateBody.getFirstName());
        actor.setLastName(updateBody.getLastName());
        
        updater.accept(actor);
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/actors/{actor_id}")
    @ApiOperation(value = "Delete a Actor entity with a specified 'actor_id' column value", httpMethod = "DELETE")
    @ApiResponse(code = 204, message = "Returns a 204 response code if a Actor entity has been deleted successfully")
    public void delete(
            @PathVariable(name = "actor_id") int actorId) {
        manager.stream()
            .filter(Actor.ACTOR_ID.equal(actorId))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class ActorFilter extends AbstractFilter<Actor> {
        
        public ActorFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Actor> toPredicate() {
            switch (property()) {
                case "actorId" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Actor.ACTOR_ID.equal(v);
                        case "ne"   : return Actor.ACTOR_ID.notEqual(v);
                        case "lt"   : return Actor.ACTOR_ID.lessThan(v);
                        case "le"   : return Actor.ACTOR_ID.lessOrEqual(v);
                        case "gt"   : return Actor.ACTOR_ID.greaterThan(v);
                        case "ge"   : return Actor.ACTOR_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Actor.actorId."
                        );
                    }
                }
                case "firstName" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Actor.FIRST_NAME.equal(v);
                        case "ne"   : return Actor.FIRST_NAME.notEqual(v);
                        case "lt"   : return Actor.FIRST_NAME.lessThan(v);
                        case "le"   : return Actor.FIRST_NAME.lessOrEqual(v);
                        case "gt"   : return Actor.FIRST_NAME.greaterThan(v);
                        case "ge"   : return Actor.FIRST_NAME.greaterOrEqual(v);
                        case "like" : return Actor.FIRST_NAME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Actor.firstName."
                        );
                    }
                }
                case "lastName" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Actor.LAST_NAME.equal(v);
                        case "ne"   : return Actor.LAST_NAME.notEqual(v);
                        case "lt"   : return Actor.LAST_NAME.lessThan(v);
                        case "le"   : return Actor.LAST_NAME.lessOrEqual(v);
                        case "gt"   : return Actor.LAST_NAME.greaterThan(v);
                        case "ge"   : return Actor.LAST_NAME.greaterOrEqual(v);
                        case "like" : return Actor.LAST_NAME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Actor.lastName."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Actor property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class ActorSort extends AbstractSort<Actor> {
        
        public ActorSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Actor> toComparator() {
            final Comparator<Actor> comparator;
            switch (property()) {
                case "actorId"   : comparator = Actor.ACTOR_ID.comparator();   break;
                case "firstName" : comparator = Actor.FIRST_NAME.comparator(); break;
                case "lastName"  : comparator = Actor.LAST_NAME.comparator();  break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Actor property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @ResponseStatus(HttpStatus.NOT_FOUND)
    private static class ActorNotFoundException extends RuntimeException {
        
        public ActorNotFoundException(int actorId) {
            super("Actor with actorId '" + actorId + "' not found");
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    @ApiModel(description = "A request body model used in POST requests to create a Actor entity")
    public static final class ActorCreateBody {
        
        private final @ApiModelProperty(required = true, value = "REST representation of the 'first_name' column (required)") String firstName;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'last_name' column (required)") String lastName;
        
        @JsonCreator
        public ActorCreateBody(
                @JsonProperty("firstName") String firstName,
                @JsonProperty("lastName") String lastName) {
            this.firstName = Objects.requireNonNull(firstName, "`firstName` is required");
            this.lastName = Objects.requireNonNull(lastName, "`lastName` is required");
        }
        
        public String getFirstName() {
            return this.firstName;
        }
        
        public String getLastName() {
            return this.lastName;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    @ApiModel(description = "A request body model used in PATCH requests to update a Actor entity")
    public static final class ActorUpdateBody {
        
        private final @ApiModelProperty(required = true, value = "REST representation of the 'first_name' column (required)") String firstName;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'last_name' column (required)") String lastName;
        
        @JsonCreator
        public ActorUpdateBody(
                @JsonProperty("firstName") String firstName,
                @JsonProperty("lastName") String lastName) {
            this.firstName = Objects.requireNonNull(firstName, "`firstName` is required");
            this.lastName = Objects.requireNonNull(lastName, "`lastName` is required");
        }
        
        public String getFirstName() {
            return this.firstName;
        }
        
        public String getLastName() {
            return this.lastName;
        }
    }
}