package com.speedment.demo.sakila.sakila.film_comment.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.demo.sakila.sakila.film.Film;
import com.speedment.demo.sakila.sakila.film_comment.FilmComment;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.speedment.demo.sakila.sakila.film_comment.FilmComment}-interface
 * representing entities of the {@code film_comment}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedFilmComment {
    
    /**
     * This Field corresponds to the {@link FilmComment} field that can be
     * obtained using the {@link FilmComment#getFilmId()} method.
     */
    IntForeignKeyField<FilmComment, Integer, Film> FILM_ID = IntForeignKeyField.create(
        Identifier.FILM_ID,
        FilmComment::getFilmId,
        FilmComment::setFilmId,
        Film.FILM_ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link FilmComment} field that can be
     * obtained using the {@link FilmComment#getComment()} method.
     */
    StringField<FilmComment, String> COMMENT = StringField.create(
        Identifier.COMMENT,
        o -> OptionalUtil.unwrap(o.getComment()),
        FilmComment::setComment,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the filmId of this FilmComment. The filmId field corresponds to
     * the database column sakila.sakila.film_comment.film_id.
     * 
     * @return the filmId of this FilmComment
     */
    int getFilmId();
    
    /**
     * Returns the comment of this FilmComment. The comment field corresponds to
     * the database column sakila.sakila.film_comment.comment.
     * 
     * @return the comment of this FilmComment
     */
    Optional<String> getComment();
    
    /**
     * Sets the filmId of this FilmComment. The filmId field corresponds to the
     * database column sakila.sakila.film_comment.film_id.
     * 
     * @param filmId to set of this FilmComment
     * @return       this FilmComment instance
     */
    FilmComment setFilmId(int filmId);
    
    /**
     * Sets the comment of this FilmComment. The comment field corresponds to
     * the database column sakila.sakila.film_comment.comment.
     * 
     * @param comment to set of this FilmComment
     * @return        this FilmComment instance
     */
    FilmComment setComment(String comment);
    
    /**
     * Queries the specified manager for the referenced Film. If no such Film
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Film findFilmId(Manager<Film> foreignManager);
    
    enum Identifier implements ColumnIdentifier<FilmComment> {
        
        FILM_ID ("film_id"),
        COMMENT ("comment");
        
        private final String columnId;
        private final TableIdentifier<FilmComment> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "sakila";
        }
        
        @Override
        public String getSchemaId() {
            return "sakila";
        }
        
        @Override
        public String getTableId() {
            return "film_comment";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<FilmComment> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}