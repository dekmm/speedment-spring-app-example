package com.speedment.demo.sakila.sakila.datetime.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.demo.sakila.sakila.datetime.Datetime;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.speedment.demo.sakila.sakila.datetime.Datetime}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDatetimeImpl implements Datetime {
    
    private short id;
    private Time time;
    private Timestamp timestamp;
    private Date date;
    private Timestamp datetime;
    
    protected GeneratedDatetimeImpl() {}
    
    @Override
    public short getId() {
        return id;
    }
    
    @Override
    public Optional<Time> getTime() {
        return Optional.ofNullable(time);
    }
    
    @Override
    public Optional<Timestamp> getTimestamp() {
        return Optional.ofNullable(timestamp);
    }
    
    @Override
    public Optional<Date> getDate() {
        return Optional.ofNullable(date);
    }
    
    @Override
    public Optional<Timestamp> getDatetime() {
        return Optional.ofNullable(datetime);
    }
    
    @Override
    public Datetime setId(short id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Datetime setTime(Time time) {
        this.time = time;
        return this;
    }
    
    @Override
    public Datetime setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    @Override
    public Datetime setDate(Date date) {
        this.date = date;
        return this;
    }
    
    @Override
    public Datetime setDatetime(Timestamp datetime) {
        this.datetime = datetime;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "        + Objects.toString(getId()));
        sj.add("time = "      + Objects.toString(OptionalUtil.unwrap(getTime())));
        sj.add("timestamp = " + Objects.toString(OptionalUtil.unwrap(getTimestamp())));
        sj.add("date = "      + Objects.toString(OptionalUtil.unwrap(getDate())));
        sj.add("datetime = "  + Objects.toString(OptionalUtil.unwrap(getDatetime())));
        return "DatetimeImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Datetime)) { return false; }
        final Datetime thatDatetime = (Datetime)that;
        if (this.getId() != thatDatetime.getId()) { return false; }
        if (!Objects.equals(this.getTime(), thatDatetime.getTime())) { return false; }
        if (!Objects.equals(this.getTimestamp(), thatDatetime.getTimestamp())) { return false; }
        if (!Objects.equals(this.getDate(), thatDatetime.getDate())) { return false; }
        if (!Objects.equals(this.getDatetime(), thatDatetime.getDatetime())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Short.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTime()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTimestamp()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDatetime()));
        return hash;
    }
}