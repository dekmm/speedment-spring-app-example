package com.speedment.demo.sakila.sakila.actor_genre.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.demo.sakila.sakila.actor_genre.ActorGenre;
import com.speedment.demo.sakila.sakila.actor_genre.ActorGenreImpl;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.speedment.demo.sakila.sakila.actor_genre.ActorGenre} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedActorGenreSqlAdapter implements SqlAdapter<ActorGenre> {
    
    private final TableIdentifier<ActorGenre> tableIdentifier;
    
    protected GeneratedActorGenreSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("sakila", "sakila", "actor_genre");
    }
    
    protected ActorGenre apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setActorGenreId( getInt(resultSet, 1 + offset))
            .setActorId(      getInt(resultSet, 2 + offset))
            .setName(         resultSet.getString(3 + offset))
            ;
    }
    
    protected ActorGenreImpl createEntity() {
        return new ActorGenreImpl();
    }
    
    @Override
    public TableIdentifier<ActorGenre> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, ActorGenre> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, ActorGenre> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}