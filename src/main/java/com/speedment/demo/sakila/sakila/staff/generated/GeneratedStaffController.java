package com.speedment.demo.sakila.sakila.staff.generated;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.demo.sakila.sakila.staff.Staff;
import com.speedment.demo.sakila.sakila.staff.StaffManager;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.core.manager.FieldSet;
import com.speedment.runtime.core.manager.Persister;
import com.speedment.runtime.core.manager.Updater;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Staff entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedStaffController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired StaffManager manager;
    protected JsonEncoder<Staff> encoder;
    
    @PostConstruct
    void createStaffEncoder() {
        encoder = jsonComponent.<Staff>emptyEncoder()
            .put("staffId", Staff.STAFF_ID)
            .put("firstName", Staff.FIRST_NAME)
            .put("lastName", Staff.LAST_NAME)
            .put("addressId", Staff.ADDRESS_ID)
            .put("email", Staff.EMAIL)
            .put("storeId", Staff.STORE_ID)
            .put("active", Staff.ACTIVE)
            .put("username", Staff.USERNAME)
            .build();
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/staff", produces = "application/json")
    @ApiOperation(value = "Retrieve a list of Staff entities", httpMethod = "GET")
    @ApiResponse(code = 200, message = "Returns a 200 response code if a list of Staff entities has been retrieved successfully", response = String.class)
    public String list(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return listHelper(
            ControllerUtil.parseFilters(filters, StaffFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, StaffSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected String listHelper(
            List<Predicate<Staff>> predicates,
            List<Comparator<Staff>> sorters,
            long start,
            long limit) {
        Stream<Staff> stream = manager.stream();
        
        for (final Predicate<Staff> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Staff>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @GetMapping(path = "/staff/{staff_id}", produces = "application/json")
    @ApiOperation(value = "Retrieve a Staff entity with a specified 'staff_id' column value", httpMethod = "GET")
    @ApiResponse(code = 200, message = "Returns a 200 response code if a Staff entity has been updated successfully")
    public String get(
            @PathVariable(name = "staff_id") int staffId) {
        return encoder.apply(
            manager.stream()
                .filter(Staff.STAFF_ID.equal(staffId))
                .findFirst()
                .orElseThrow(() -> new StaffNotFoundException(staffId))
        );
    }
    
    @ResponseStatus(code = HttpStatus.CREATED)
    @PostMapping(path = "/staff", consumes = "application/json")
    @ApiOperation(value = "Create a Staff entity", httpMethod = "POST")
    @ApiResponse(code = 201, message = "Returns a 201 response code if a Staff entity has been created successfully")
    public void create(
            @RequestBody @Validated StaffCreateBody createBody) {
        final FieldSet<Staff> excluded = FieldSet.allExcept(
            Staff.STAFF_ID
        );
        
        final Persister<Staff> persister = manager.persister(excluded);
        final Staff staff = manager.create()
            .setFirstName(createBody.getFirstName())
            .setLastName(createBody.getLastName())
            .setAddressId(createBody.getAddressId())
            .setEmail(createBody.getEmail())
            .setStoreId(createBody.getStoreId())
            .setActive(createBody.getActive())
            .setUsername(createBody.getUsername())
        ;
        
        persister.accept(staff);
    }
    
    @ResponseStatus(code = HttpStatus.OK)
    @PatchMapping(path = "/staff/{staff_id}", consumes = "application/json")
    @ApiOperation(value = "Update a Staff entity with a specified 'staff_id' column value", httpMethod = "PATCH")
    @ApiResponse(code = 201, message = "Returns a 201 response code if a Staff entity has been updated successfully")
    public void update(
            @PathVariable(name = "staff_id") int staffId,
            @RequestBody @Validated StaffUpdateBody updateBody) {
        final FieldSet<Staff> excluded = FieldSet.allExcept(
            Staff.STAFF_ID
        );
        
        final Updater<Staff> updater = manager.updater(excluded);
        final Staff staff = manager.stream()
            .filter(Staff.STAFF_ID.equal(staffId))
            .findFirst()
            .orElseThrow(() -> new StaffNotFoundException(staffId));
        
        staff.setFirstName(updateBody.getFirstName());
        staff.setLastName(updateBody.getLastName());
        staff.setAddressId(updateBody.getAddressId());
        staff.setEmail(updateBody.getEmail());
        staff.setStoreId(updateBody.getStoreId());
        staff.setActive(updateBody.getActive());
        staff.setUsername(updateBody.getUsername());
        
        updater.accept(staff);
    }
    
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    @DeleteMapping(path = "/staff/{staff_id}")
    @ApiOperation(value = "Delete a Staff entity with a specified 'staff_id' column value", httpMethod = "DELETE")
    @ApiResponse(code = 204, message = "Returns a 204 response code if a Staff entity has been deleted successfully")
    public void delete(
            @PathVariable(name = "staff_id") int staffId) {
        manager.stream()
            .filter(Staff.STAFF_ID.equal(staffId))
            .forEach(manager.remover());
    }
    
    @ExceptionHandler(JsonMappingException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleMissingValueError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: missing required fields");
        
        return Json.toJson(error, true);
    }
    
    @ExceptionHandler(JsonParseException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public String handleInvalidJsonError() {
        Map<String, Object> error = new HashMap<>();
        error.put("error", "Bad Request");
        error.put("status", 400);
        error.put("message", "Invalid request body: invalid JSON syntax");
        
        return Json.toJson(error, true);
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public static final class StaffFilter extends AbstractFilter<Staff> {
        
        public StaffFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Staff> toPredicate() {
            switch (property()) {
                case "staffId" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Staff.STAFF_ID.equal(v);
                        case "ne"   : return Staff.STAFF_ID.notEqual(v);
                        case "lt"   : return Staff.STAFF_ID.lessThan(v);
                        case "le"   : return Staff.STAFF_ID.lessOrEqual(v);
                        case "gt"   : return Staff.STAFF_ID.greaterThan(v);
                        case "ge"   : return Staff.STAFF_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Staff.staffId."
                        );
                    }
                }
                case "firstName" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Staff.FIRST_NAME.equal(v);
                        case "ne"   : return Staff.FIRST_NAME.notEqual(v);
                        case "lt"   : return Staff.FIRST_NAME.lessThan(v);
                        case "le"   : return Staff.FIRST_NAME.lessOrEqual(v);
                        case "gt"   : return Staff.FIRST_NAME.greaterThan(v);
                        case "ge"   : return Staff.FIRST_NAME.greaterOrEqual(v);
                        case "like" : return Staff.FIRST_NAME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Staff.firstName."
                        );
                    }
                }
                case "lastName" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Staff.LAST_NAME.equal(v);
                        case "ne"   : return Staff.LAST_NAME.notEqual(v);
                        case "lt"   : return Staff.LAST_NAME.lessThan(v);
                        case "le"   : return Staff.LAST_NAME.lessOrEqual(v);
                        case "gt"   : return Staff.LAST_NAME.greaterThan(v);
                        case "ge"   : return Staff.LAST_NAME.greaterOrEqual(v);
                        case "like" : return Staff.LAST_NAME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Staff.lastName."
                        );
                    }
                }
                case "addressId" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Staff.ADDRESS_ID.equal(v);
                        case "ne"   : return Staff.ADDRESS_ID.notEqual(v);
                        case "lt"   : return Staff.ADDRESS_ID.lessThan(v);
                        case "le"   : return Staff.ADDRESS_ID.lessOrEqual(v);
                        case "gt"   : return Staff.ADDRESS_ID.greaterThan(v);
                        case "ge"   : return Staff.ADDRESS_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Staff.addressId."
                        );
                    }
                }
                case "email" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Staff.EMAIL.equal(v);
                        case "ne"   : return Staff.EMAIL.notEqual(v);
                        case "lt"   : return Staff.EMAIL.lessThan(v);
                        case "le"   : return Staff.EMAIL.lessOrEqual(v);
                        case "gt"   : return Staff.EMAIL.greaterThan(v);
                        case "ge"   : return Staff.EMAIL.greaterOrEqual(v);
                        case "like" : return Staff.EMAIL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Staff.email."
                        );
                    }
                }
                case "storeId" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Staff.STORE_ID.equal(v);
                        case "ne"   : return Staff.STORE_ID.notEqual(v);
                        case "lt"   : return Staff.STORE_ID.lessThan(v);
                        case "le"   : return Staff.STORE_ID.lessOrEqual(v);
                        case "gt"   : return Staff.STORE_ID.greaterThan(v);
                        case "ge"   : return Staff.STORE_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Staff.storeId."
                        );
                    }
                }
                case "username" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Staff.USERNAME.equal(v);
                        case "ne"   : return Staff.USERNAME.notEqual(v);
                        case "lt"   : return Staff.USERNAME.lessThan(v);
                        case "le"   : return Staff.USERNAME.lessOrEqual(v);
                        case "gt"   : return Staff.USERNAME.greaterThan(v);
                        case "ge"   : return Staff.USERNAME.greaterOrEqual(v);
                        case "like" : return Staff.USERNAME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Staff.username."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Staff property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public static final class StaffSort extends AbstractSort<Staff> {
        
        public StaffSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Staff> toComparator() {
            final Comparator<Staff> comparator;
            switch (property()) {
                case "staffId"   : comparator = Staff.STAFF_ID.comparator();   break;
                case "firstName" : comparator = Staff.FIRST_NAME.comparator(); break;
                case "lastName"  : comparator = Staff.LAST_NAME.comparator();  break;
                case "addressId" : comparator = Staff.ADDRESS_ID.comparator(); break;
                case "email"     : comparator = Staff.EMAIL.comparator();      break;
                case "storeId"   : comparator = Staff.STORE_ID.comparator();   break;
                case "username"  : comparator = Staff.USERNAME.comparator();   break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Staff property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
    
    @ResponseStatus(HttpStatus.NOT_FOUND)
    private static class StaffNotFoundException extends RuntimeException {
        
        public StaffNotFoundException(int staffId) {
            super("Staff with staffId '" + staffId + "' not found");
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    @ApiModel(description = "A request body model used in POST requests to create a Staff entity")
    public static final class StaffCreateBody {
        
        private final @ApiModelProperty(required = true, value = "REST representation of the 'first_name' column (required)") String firstName;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'last_name' column (required)") String lastName;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'address_id' column (required)") int addressId;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'email' column (required)") String email;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'store_id' column (required)") int storeId;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'active' column (required)") boolean active;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'username' column (required)") String username;
        
        @JsonCreator
        public StaffCreateBody(
                @JsonProperty("firstName") String firstName,
                @JsonProperty("lastName") String lastName,
                @JsonProperty("addressId") Integer addressId,
                @JsonProperty("email") String email,
                @JsonProperty("storeId") Integer storeId,
                @JsonProperty("active") Boolean active,
                @JsonProperty("username") String username) {
            this.firstName = Objects.requireNonNull(firstName, "`firstName` is required");
            this.lastName = Objects.requireNonNull(lastName, "`lastName` is required");
            this.addressId = Objects.requireNonNull(addressId, "`addressId` is required");
            this.email = Objects.requireNonNull(email, "`email` is required");
            this.storeId = Objects.requireNonNull(storeId, "`storeId` is required");
            this.active = Objects.requireNonNull(active, "`active` is required");
            this.username = Objects.requireNonNull(username, "`username` is required");
        }
        
        public String getFirstName() {
            return this.firstName;
        }
        
        public String getLastName() {
            return this.lastName;
        }
        
        public int getAddressId() {
            return this.addressId;
        }
        
        public String getEmail() {
            return this.email;
        }
        
        public int getStoreId() {
            return this.storeId;
        }
        
        public boolean getActive() {
            return this.active;
        }
        
        public String getUsername() {
            return this.username;
        }
    }
    
    @JsonInclude(Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    @ApiModel(description = "A request body model used in PATCH requests to update a Staff entity")
    public static final class StaffUpdateBody {
        
        private final @ApiModelProperty(required = true, value = "REST representation of the 'first_name' column (required)") String firstName;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'last_name' column (required)") String lastName;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'address_id' column (required)") int addressId;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'email' column (required)") String email;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'store_id' column (required)") int storeId;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'active' column (required)") boolean active;
        private final @ApiModelProperty(required = true, value = "REST representation of the 'username' column (required)") String username;
        
        @JsonCreator
        public StaffUpdateBody(
                @JsonProperty("firstName") String firstName,
                @JsonProperty("lastName") String lastName,
                @JsonProperty("addressId") Integer addressId,
                @JsonProperty("email") String email,
                @JsonProperty("storeId") Integer storeId,
                @JsonProperty("active") Boolean active,
                @JsonProperty("username") String username) {
            this.firstName = Objects.requireNonNull(firstName, "`firstName` is required");
            this.lastName = Objects.requireNonNull(lastName, "`lastName` is required");
            this.addressId = Objects.requireNonNull(addressId, "`addressId` is required");
            this.email = Objects.requireNonNull(email, "`email` is required");
            this.storeId = Objects.requireNonNull(storeId, "`storeId` is required");
            this.active = Objects.requireNonNull(active, "`active` is required");
            this.username = Objects.requireNonNull(username, "`username` is required");
        }
        
        public String getFirstName() {
            return this.firstName;
        }
        
        public String getLastName() {
            return this.lastName;
        }
        
        public int getAddressId() {
            return this.addressId;
        }
        
        public String getEmail() {
            return this.email;
        }
        
        public int getStoreId() {
            return this.storeId;
        }
        
        public boolean getActive() {
            return this.active;
        }
        
        public String getUsername() {
            return this.username;
        }
    }
}